using System;

namespace lab_1
{
    class Program
    {
        static void Main(string[] args)
        {
            Money money = Money.of(100, Currency.PLN);
            Money money2 = Money.of(150, Currency.PLN);
            Money money3 = Money.of(100, Currency.USD);
            Console.WriteLine((money2 + money).Value);
            Console.WriteLine(money.Percent(23.45m));
            Console.WriteLine(money3.CurrencyConversion(Currency.PLN, 4.1m));
        }
    }

    /// <summary>
    /// Available value types
    /// </summary>
    public enum Currency
    {
        PLN = 1,
        USD = 2,
        EUR = 3
    }

    public class Money
    {
        private readonly decimal _value;

        public decimal Value
        {
            get { return _value; }
        }

        private readonly Currency _currency;

        public Currency Currency
        {
            get { return _currency; }
        }

        private Money(decimal value, Currency currency)
        {
            _currency = currency;
            _value = value;
        }



        /// <summary>
        /// Multiplier operator for two different money objects with same currency types
        /// </summary>
        /// <returns>Result of multiplication two money objects</returns>
        public static Money operator *(Money money, decimal value)
        {
            return Money.of(money.Value * value, money._currency);
        }

        /// <summary>
        /// Multiplier operator for two different money objects with same currency types but inverted
        /// </summary>
        /// <returns>Result of multiplication two money objects</returns>
        public static Money operator *(decimal value, Money money)
        {
            return Money.of(value * money.Value, money._currency);
        }

        /// <summary>
        /// Additon of two different money objects with same currency types
        /// </summary>
        /// <returns>Sum of two money objects</returns>
        public static Money operator +(Money money, Money money2)
        {
            if (money._currency != money2._currency)
            {
                throw new ArgumentException("Różne waluty");
            }
            else
            {
                return Money.of(money.Value + money2.Value, money._currency);
            }
        }

        /// <summary>
        /// Greater than operator between two different money objects with same currency type
        /// </summary>
        /// <returns>Greater money object</returns>
        public static bool operator >(Money money, Money money2)
        {
            if (money._currency != money2._currency)
            {
                throw new ArgumentException("Różne waluty");
            }
            else
            {
                return money.Value > money2.Value;
            }
        }

        /// <summary>
        /// Lesser than operator between two different money objects with same currency type
        /// </summary>
        /// <returns>Lesser money object</returns>
        public static bool operator <(Money money, Money money2)
        {
            if (money._currency != money2._currency)
            {
                throw new ArgumentException("Różne waluty");
            }
            else
            {
                return money.Value < money2.Value;
            }
        }

        public static Money of(decimal value, Currency currency)
        {
            if (value >= 0)
            {
                return new Money(value, currency);
            }
            else
            {
                return null;
            }
        }
        public static Money ofWithException(decimal value, Currency currency)
        {
            if (value >= 0)
            {
                return new Money(value, currency);
            }
            else
            {
                throw new ArgumentException("Wrong value");
            }
        }

        public static implicit operator decimal(Money money)
        {
            return money.Value;
        }
        public static explicit operator double(Money money)
        {
            return (double)money.Value;
        }
        public static explicit operator float(Money money)
        {
            return (float)money.Value;
        }

        public bool Equals(Money other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return _value == other._value && _currency.Equals(other._currency);
        }
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((Money)obj);
        }

        public int CompareTo(Money? other)
        {
            if (ReferenceEquals(this, other)) return 0;
            if (ReferenceEquals(null, other)) return 1;
            var currencyComparison = _currency.CompareTo(other._currency);
            if (currencyComparison != 0) return currencyComparison;
            return _value.CompareTo(other._value);
        }
    }

    /// <summary>
    /// Extension methods for Money
    /// </summary>
    public static class MoneyExtension
    {
        /// <summary>
        /// Percent of value
        /// </summary>
        /// <returns>Percent of certain money object</returns>
        public static Money Percent(this Money money, decimal percent)
        {
            return Money.of((money.Value * percent) / 100m, money.Currency) ?? throw new
            ArgumentException();
        }

        /// <summary>
        /// Currency conversion
        /// </summary>
        /// <returns>Result of currency conversion for certain money object</returns>
        public static Money CurrencyConversion(this Money money, Currency currency, decimal value)
        {
            if (money.Currency != currency)
            {
                return Money.of(money.Value * value, money.Currency);
            }
            else
            {
                throw new ArgumentException("Nie mozna przewalutowac na te sama walute");
            }

        }
    }

    //Tank
    public class Tank
    {
        public readonly int Capacity;
        private int _level;
        public Tank(int capacity)
        {
            Capacity = capacity;
        }
        public int Level
        {
            get
            {
                return _level;
            }
            private set
            {
                if (value < 0 || value > Capacity)
                {
                    throw new ArgumentOutOfRangeException();
                }
                _level = value;
            }
        }


        public bool refuel(int amount)
        {
            if (amount < 0)
            {
                return false;
            }
            if (_level + amount > Capacity)
            {
                return false;
            }
            _level += amount;
            return true;
        }

        public bool consume(Tank sourceTank, int amount)
        {
            if (amount > 0 && _level - amount >= 0)
            {
                _level -= amount;
                return true;
            }
            else
            {
                return false;
            }
        }
    }
    class Student
    {
        public string Nazwisko { get; set; }
        public string Imie { get; set; }
        public decimal Średnia { get; set; }

        public override bool Equals(object obj)
        {
            return obj is Student student &&
                   Nazwisko == student.Nazwisko &&
                   Imie == student.Imie &&
                   Średnia == student.Średnia;
        }
        public override int GetHashCode()
        {
            throw new NotImplementedException();
        }
    }
}
