using System;

namespace lab_1
{
    class Program
    {
        static void Main(string[] args)
        {
            /*Money money = Money.of(100, Currency.PLN);
            Money money2 = Money.of(150, Currency.PLN);
            Console.WriteLine((money2+money).Value);*/

            Tank tank1 = new Tank(500);
        }
    }

    //Waluty
    public enum Currency
    {
        PLN = 1,
        USD = 2,
        EUR = 3
    }

    public class Money
    {
        private readonly decimal _value;

        public decimal Value
        {
            get { return _value; }
        }

        private readonly Currency _currency;

        public Currency Currency
        {
            get { return _currency; }
        }

        private Money(decimal value, Currency currency)
        {
            _currency = currency;
            _value = value;
        }



        //Operator mnozenia
        public static Money operator *(Money money, decimal value)
        {
            return Money.of(money.Value * value, money._currency);
        }

        //Operator mnozenia odwrotnie
        public static Money operator *(decimal value, Money money)
        {
            return Money.of(value * money.Value, money._currency);
        }

        //Operator dodwania
        public static Money operator +(Money money, Money money2)
        {
            if (money._currency != money2._currency)
            {
                throw new ArgumentException("Różne waluty");
            }
            else
            {
                return Money.of(money.Value + money2.Value, money._currency);
            }
        }

        // Operatory wiekszosci i mniejszosci

        //WYMAGANA REFRAKTORYZACJA
        public static bool operator >(Money money, Money money2)
        {
            if (money._currency != money2._currency)
            {
                throw new ArgumentException("Różne waluty");
            }
            else
            {
                return money.Value > money2.Value;
            }
        }

        public static bool operator <(Money money, Money money2)
        {
            if (money._currency == money2._currency)
            {
                return money.Value > money2.Value;
            }
            else
            {
                throw new ArgumentException("Różne waluty");
            }
        }

        public static Money of(decimal value, Currency currency)
        {
            if (value >= 0)
            {
                return new Money(value, currency);
            }
            else
            {
                return null;
            }
        }
        public static Money ofWithException(decimal value, Currency currency)
        {
            if (value >= 0)
            {
                return new Money(value, currency);
            }
            else
            {
                throw new ArgumentException("Wrong value");
            }
        }

        //Rzutowanie 
        public static implicit operator decimal(Money money)
        {
            return money.Value;
        }
        public static explicit operator double(Money money)
        {
            return (double)money.Value;
        }
        public static explicit operator float(Money money)
        {
            return (float)money.Value;
        }

        public bool Equals(Money other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return _value == other._value && _currency.Equals(other._currency);
        }
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((Money)obj);
        }

    }

    //Zbiornik z ciecza
    public class Tank
    {
        public readonly int Capacity;
        private int _level;
        public Tank(int capacity)
        {
            Capacity = capacity;
        }
        public int Level
        {
            get
            {
                return _level;
            }
            private set
            {
                if (value < 0 || value > Capacity)
                {
                    throw new ArgumentOutOfRangeException();
                }
                _level = value;
            }
        }


        public bool refuel(int amount)
        {
            if (amount < 0)
            {
                return false;
            }
            if (_level + amount > Capacity)
            {
                return false;
            }
            _level += amount;
            return true;
        }

        public bool consume(int amount)
        {
            if (amount > 0 && _level - amount >= 0)
            {
                _level -= amount;
                return true;
            }
            else
            {
                return false;
            }
        }
    }
    class Student
    {
        public string Nazwisko { get; set; }

        public string Imie { get; set; }
        public decimal Średnia { get; set; }

        public override bool Equals(object obj)
        {
            return obj is Student student &&
                   Nazwisko == student.Nazwisko &&
                   Imie == student.Imie &&
                   Średnia == student.Średnia;
        }
        public override int GetHashCode()
        {
            throw new NotImplementedException();
        }
    }
}
